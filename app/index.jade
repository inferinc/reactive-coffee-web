extends layouts/base
block title
  | Reactive Coffee - A Lightweight CoffeeScript library/DSL for reactive
  | programming and for declaratively building dynamic web UIs
block header
  .overlay
  .inner
    h1: a(href='/') reactive.coffee
    h2
      | A lightweight CoffeeScript library/DSL for reactive programming and for declaratively building dynamic web UIs
    a.button(href='https://github.com/yang/reactive-coffee')
      small View project on
      | GitHub
  nav
    .inner
      .inner-inner
        a(href='a') Documentation
        a(href='a') Community/Support
        a(href='a') Rationale
        a(href='a') Development
block content
  :markdown
    ## Highlights

    - Library of reactive programming primitives
    - Declarative DOM construction
    - Simple, no magic, no new template syntax, all CoffeeScript
    - Scalable in both performance and application architecture
    - Tested with Chrome, Firefox, Safari, and IE10
    - Available via [Bower] and [cdnjs]
    - Works with jQuery
    - MIT license

    [Bower]: http://bower.io/
    [cdnjs]: http://cdnjs.com/
    [fiddle]: http://jsfiddle.net/yang/SGvuy/

    ## Example: To-Do List

    [Play with example on jsFiddle][fiddle] or [see a complete TodoMVC example][TodoMVC]

    ```coffeescript
    class Task
      constructor: (description, isDone) ->
        @description = rx.cell(description)
        @isDone = rx.cell(isDone)

    tasks = rx.array([
      new Task('Get milk', false)
      new Task('Play with Reactive Coffee', false)
      new Task('Walk the dog', false)
    ])

    $('body').append(
      div {class: 'task-manager'}, [
        h1 {}, ["Tasks for today"]
        ul {class: 'tasks'}, tasks.map (task) ->
          li {class: 'task'}, [
            input {
              type: 'checkbox'
              checked: bind -> task.isDone.get()
              init: -> @change => task.isDone.set(@val())
            }
            span { style: bind -> "opacity: #{if task.isDone.get() then .5 else 1}" }, [
              task.description.get()
            ]
          ]
        $newTask = input {type: 'text', placeholder: 'Enter new task'}
      ]
    )

    $newTask.keydown (e) ->
      if e.key == 13
        tasks.push(new Task($(this).val(), false))
        $(this).val('')
    ```

    ## Next steps

    See more [quickstart examples][quickstart], read through the [tutorial][tutorial], or learn more about the [motivation and design rationale][design].

    [quickstart]: quickstart
    [tutorial]: tutorial
    [design]: design

    [TodoMVC]: https://github.com/yang/reactive-coffee/blob/master/examples/todomvc/index.jade
