extends layouts/base
block title
  | Reactive Coffee - A lightweight CoffeeScript library/DSL for reactive
  | programming and for declaratively building scalable web UIs
block header
  .overlay
  .inner
    h1: a(href='/reactive-coffee/') reactive.coffee
    h2
      | A lightweight CoffeeScript library/DSL for reactive programming and for declaratively building scalable web UIs
    a.button(href='https://github.com/yang/reactive-coffee')
      small View project on
      | GitHub
  nav.top-nav
    .inner
      .inner-inner
        a(href='quickstart.html') Documentation
        a(href='support.html') Community/Support
        a(href='design.html') Rationale
        a(href='dev-setup.html') Development
block body
  section#main-content
    :markdown
      ## Highlights

      <div class='note'>
      *Already familiar with other frameworks such as Angular or React?  See
      [Design] and [Comparisons][related].*
      </div>

      - Library of reactive programming primitives
      - Declarative DOM construction
      - Scalable in both performance and application architecture
      - Simple, no magic, no new template language, all CoffeeScript
      - Tested with Chrome, Firefox, Safari, and IE10
      - Available via [Bower] and [cdnjs]
      - Works with jQuery
      - MIT license

      [Bower]: http://bower.io/
      [cdnjs]: http://cdnjs.com/
      [fiddle]: http://jsfiddle.net/yang/SGvuy/

      ## Example: To-Do List

      Get a quick taste of reactive.coffee.  You can [play with this example on
      jsFiddle][fiddle], see a [complete TodoMVC example][TodoMVC], or head
      directly to the [tutorial].

      ```coffeescript
      # This is our core data model, an array of Task objects.

      class Task
        constructor: (descrip, priority, isDone) ->
          @descrip = rx.cell(descrip)
          @priority = rx.cell(priority)
          @isDone = rx.cell(isDone)

      tasks = rx.array([
        new Task('Get milk', 'important', false)
        new Task('Play with Reactive Coffee', 'critical', false)
        new Task('Walk the dog', 'meh', false)
      ])

      # Our main view: a checklist of tasks, a button to add a new task, and a task
      # editor component (defined further down).

      main = ->
        currentTask = rx.cell(tasks.at(0)) # "View model" of currently selected task

        $('body').append(
          div {class: 'task-manager'}, [
            h1 bind -> "#{tasks.length()} task(s) for today"
            ul {class: 'tasks'}, tasks.map (task) ->
              li {class: 'task'}, [
                input {type: 'checkbox', click: -> task.isDone.set(@is(':checked')); true}
                span {class: 'descrip'}, bind ->
                  "#{task.descrip.get()} (#{task.priority.get()})"
                a {href: 'javascript: void 0', click: -> currentTask.set(task)}, 'Edit'
              ]
            button {click: -> tasks.push(new Task('Task', 'none', false))}, 'Add new task'
            taskEditor {
              task: bind -> currentTask.get()
              onSubmit: (descrip, priority) ->
                currentTask.get().descrip.set(descrip)
                currentTask.get().priority.set(priority)
            }
          ]
        )

      # The task editor demonstrates how to define a simple component.

      taskEditor = (opts) ->
        task = -> opts.task.get()
        theForm = form [
          h2 'Edit Task'
          label 'Description'
          descrip = input {type: 'text', value: bind -> task().descrip.get()}
          br()
          label 'Priority'
          priority = input {type: 'text', value: bind -> task().priority.get()}
          br()
          label 'Status'
          span bind -> if task().isDone.get() then 'Done' else 'Not done'
          br()
          button 'Update'
        ]
        theForm.submit ->
          opts.onSubmit(descrip.val().trim(), priority.val().trim())
          @reset()
          false

      $(main)
      ```

      ## Next steps

      See more [quickstart examples][quickstart], read through the
      [tutorial][tutorial], or learn more about the [motivation and design
      rationale][design].

      [quickstart]: quickstart.html
      [tutorial]: tutorial.html
      [design]: design.html
      [related]: related.html

      [TodoMVC]: https://github.com/yang/reactive-coffee/blob/master/examples/todomvc/index.jade

  aside#sidebar
    a.button(href='https://github.com/yang/reactive-coffee/zipball/0.0.1')
      small Download version 0.0.1
      |  .zip file
    a.button(href='https://github.com/yang/reactive-coffee/tarball/0.0.1')
      small Download version 0.0.1
      |  .tar.gz file
    p.repo-owner
      | Latest release is v0.0.1. 
      a(href='changes.html') Changes
      | .
    :markdown
      Minified: 10KB.

      Stay updated on [Twitter].

      [Twitter]: https://twitter.com/reactivecoffee
