extends layouts/rationale
block title
  | Motivation and Design Rationale - reactive.coffee
block content
  :markdown
    Motivation and Design Rationale
    ===============================

    With so many client-side model-view web frameworks out there, why create yet
    another one?  What's so special about this one?

    The goals of this particular framework are to strive for elegance and
    simplicity of mechanism in a package that minimizes "magic," while at the same
    time achieving the expressiveness of frameworks that allow for declarative
    specification of data-bound template views which react immediately to changes
    in the model.  Another core goal is to have foundations in composable core
    primitives that scale well in both performance and code architecture to complex
    applications involving both large numbers of bindings and deep/complex model
    structures.

    Reactive actually consists of two layers.  At its core, it provides reactive
    programming primitives that allows users to declaratively specify arbitrary
    dataflow DAGs, where data structures are automatically updated in response to
    updates in their dependencies.  This is in lieu of the more complex event
    systems powering systems like [Backbone].  The idea is that all application
    dependencies, including high-level business logic and domain-specific concepts,
    are conveniently represented by (potentially complex) data types built out of
    observable nodes.

    [Backbone]: http://backbonejs.org/

    The second layer in Reactive is that of the "template language," the DSL for
    constructing UIs out of not only DOM elements but arbitrary user-defined
    components as well.

    A major benefit of embedding into a host language that is a full-fledged
    programming language, rather than creating a limited template language, is that
    the system now inherits the abstractions and expressive power of the host
    language for free.  For instance, defining reusable component abstractions is
    as simple as.  The ability to define reusable components, and the manner in
    which they are assembled together, is at the core of what makes for scalable
    architecture, and this is an area where Reactive is very simple.  Plus, we
    inherit all the expressivity of the host language, control flow (loops and
    conditionals), variables, expressions, and so forth.

    Furthermore, by avoiding the creation of a new language (even simple syntactic
    transforms), you retain all the benefits of the tooling around an established
    host language, such as source maps, syntax highlighting, linting, comment doc
    processing, compiler implementations, etc.

    The syntax leverages some features of CoffeeScript to achieve the expressive
    power of a declarative HTML-ish template language:

    - [general malleability][DSLs] for DSLs, esp. for declaring structures
    - concise anonymous function definitions for delimiting bindings to re-compute
    - string interpolation
    - reuse any code you've already written

    [DSLs]: https://github.com/jashkenas/coffee-script/wiki/%5Bextensibility%5D-writing-DSLs

    At the same time, because we are simply writing CoffeeScript, we have all the
    flexibility and code which that brings to the table, useful for shaping data
    for the views as well as for specifying component behavior.

    Reactive is designed for rich application development.  This is a
    developer-centric framework that does not pretend to be something that is used
    by designers or tools (which is not to say it does not fit in a workflow
    involving both developers and designers).  Rather than focusing on the division
    between markup and logic, Reactive focuses on separating models from views,
    enabling complex UIs (such as recursively structured DOMs), and on the
    component abstraction.  Components must encapsulate not just markup, but
    also behavior.  The two should be coupled, not separated.

    The framework needs to scale well to more complex front-ends, including:

    - web page editor where the model is the DOM, CSSOM, etc. of a web page, and
      views are not just editing controls but also the *fully rendered web page
      itself*
    - data analysis tool involving sizeable amounts of data and detailed
      visualizations over the data, where individual data points are represented in
      the visualizations

    Finally, Reactive also aims to be a compact framework.  The documentation
    you're now reading is significantly longer than the code.

    For more on design choices and to juxtapose this framework against others in
    this space, refer to [FAQ](faq.html) and [Related Work](related.html).
