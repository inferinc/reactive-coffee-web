extends layouts/documentation
block title
  | API Reference - reactive.coffee
block content
  :markdown
    API Reference
    =============

    ## `rx` Namespace

    This contains the core reactive programming primitives.  These are the core
    data structures:

    - `ObsCell`: observable cell base class
        - `SrcCell`: a source cell, one that can be directly mutated
        - `DepCell`: a dependent cell, one whose value is some function of another
          observable cell
    - `ObsArray`: observable array base class
        - `SrcArray`: a source array, one that can be directly mutated
        - `DepArray`: a dependent array, one whose value is some transformation of
          another observable array
    - `ObsMap`: observable object (map) base class
        - `SrcMap`: a source object, one that can be directly mutated
        - `DepMap`: a dependent object, one whose value is some transformation of
          another observable object
    - `Ev`: an event node; serves as a pub-sub node for events of a certain
      type

    **Free functions**

    - `cell(value)`: return a `SrcCell` initialized to the given value (optional;
      defaults to `undefined`)
    - `array(value)`: return a `SrcArray` initialized to the given array (optional;
      defaults to `[]`)
    - `bind(fn)`: given a 0-ary function, return a `DepCell` whose value is the
      bound to the result of evaluating that function.  The function is immediately
      evaluated once, and each time it's evaluated, for any accesses of
      observables, the `DepCell` subscribes to the corresponding events, which may
      subsequently trigger future re-evaluations.
    - `lagBind(init, fn)`: same as `bind` but waits a 500ms delay after getting an
      update before the `DepCell` updates itself (yes, this needs to be a
      configurable parameter)

    **`ObsCell` members**

    - `get()`: return current value of the cell
    - `onSet`: the event that is fired after the value of the cell is
      changed.  The event data is an array of two elements, `[oldVal, newVal]`.

    **`SrcCell` members**

    - `set(x)`: set value of cell to `x` and return old value of `x`
    - inherits `ObsCell`

    **`DepCell` members**

    - inherits `ObsCell`
    - `disconnect`: unsubscribes this cell from its dependencies and
      recursively disconnects all nested binds; useful for manual disposal of
      `bind`s

    **`ObsArray` members**

    - `at(i)`: return element at `i`
    - `all()`: return array copy of all elements
    - `raw()`: return raw array of all elements; this is unsafe since mutations
      will violate the encapsulated invariants, but serves as a performance
      escape hatch around `all()`
    - `length()`: return size of the array
    - `map(fn)`: return `DepArray` of given function mapped over this array
    - `onChange`: the event that is fired after any part of the array is
      changed.  The event data is an array of three elements: `[index, added,
      removed]`, where `index` is the index where the change occurred, `added`
      is the sub-array of elements that were added, and `removed` is the
      sub-array of elements that were removed.

    **`SrcArray` members**

    - `splice(index, count, additions...)`: replace `count` elements starting at
      `index` with `additions`
    - `insert(x, i)`: insert value `x` at index `i`
    - `remove(x)`: find and remove first occurrence of `x`
    - `removeAt(i)`: remove element at index `i`
    - `push(x)`: append `x` to the end of the array
    - `put(i, x)`: replace element `i` with value `x`
    - `replace(xs)`: replace entire array with raw array `xs`
    - inherits `ObsArray`

    **`DepArray` members**

    - inherits `ObsArray`

    **`ObsMap` members**

    - `get(k)`: return value associated with key `k`
    - `all()`: return raw object copy
    - `onAdd`: the event that is fired after an element is added.  The event
      data is `[key, newVal]`.
    - `onRemove`: the event that is fired after an element is removed.  The
      event data is `[key, oldVal]`.
    - `onChange`: the event that is fired after a key's value is changed.  The
      event data is `[key, oldVal, newVal]`.

    **`SrcMap` members**

    - `put(k, v)`: associate value `v` with key `k` and return any prior value associated with `k`
    - `remove(k)`: remove the entry associated at key `k`
    - inherits `ObsMap`

    **`DepMap` members**

    - inherits `ObsMap`

    **`Ev` members**

    - `sub(listener)`: subscribes a listener function for events from this
      event node and returns a unique ID for this subscription, which can be used
      as the handle by which to unsubscribe later.  The listener takes a single
      argument, whose type depends on the event, and is called every time an
      event is fired on this event node.
    - `pub(data)`: publish an event, described by the data in `data`.  `data`
      is what will be passed to all the subscribed listeners.
    - `unsub(subscriptionId)`: detaches a listener from this event.

    ## `rxt` Namespace

    This contains the template DSL constructs.  Main thing here is the _tag
    function_, which is what constructs a DOM element.

    **Free functions**

    - `mktag(tag)`: returns a tag function of the given tag name.  The various
      tags like `div` and `h2` are simply aliases; e.g., `div =
      mktag('div')`.  Tag functions themselves take `(attrs, children)`, where
      `attrs` is a JavaScript object of HTML attributes and/or _special
      attributes_ and `children` is an optional list of child elements
      (jQuery-wrapped) and/or strings (for text nodes).  They return an
      instance of the specified element wrapped in a jQuery object.  See also `specialAttrs` below for more on special attributes.
    - `importTags()`: populate the global namespace with the tag symbols, so you
      don't need have `rxt` all over your templates.  Useful for quickly throwing
      something together.
    - `rawHtml(html)`: returns a `RawHtml` wrapper for strings that tags won't
      escape when rendering; example: `div {}, [rawHtml('<span>hello</span>')]`
    - Tags: `p`, `br`, `ul`, `li`, `span`, `anchor`, `div`, `input`, `select`,
      `option`, `label`, `button`, `fieldset`, `legend`, `section`, `header`,
      `footer`, `strong`, `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `h7`

    **jQuery plug-in**

    - `rx(property)`: lazily create (or take the cached instance) of a cell whose
      value is maintained to reflect the desired property on the element.
      `property` can be `'checked'`, `'focused'`, or `'val'`.  Returns the cell.

    **Special attributes**

    _Special attributes_ are handled differently from normal.  The built-in
    special attributes are primarily events like `click`:

    ```coffeescript
    button {click: -> console.log('hello')}, 'Hello'
    ```

    Special attributes are really just a convenient short-hand for running the
    handler functions after constructing object.  The above example is equivalent to:

    ```coffeescript
    $button = button 'Hello'
    $button.click -> console.log('hello')
    ```

    The built-in special attributes available include:

    - `init`: which is a 0-ary function that is run immediately upon
      instantiation of the element.

    - events like `click`, `focus`, `mouseleave`, `keyup`, `load`, etc.,:
      these are available for all jQuery events.  The handlers are similar to
      those you would pass to a jQuery event method—they take a jQuery event
      and return false to stop propagation—but the context is the
      jQuery-wrapped element instead of the raw element.  The full list:

        - `blur`
        - `change`
        - `click`
        - `dblclick`
        - `error`
        - `focus`
        - `focusin`
        - `focusout`
        - `hover`
        - `keydown`
        - `keypress`
        - `keyup`
        - `load`
        - `mousedown`
        - `mouseenter`
        - `mouseleave`
        - `mousemove`
        - `mouseout`
        - `mouseover`
        - `mouseup`
        - `ready`
        - `resize`
        - `scroll`
        - `select`
        - `submit`
        - `toggle`
        - `unload`

    `specialAttrs`: an object mapping special attribute names to the functions
    that handle them.  When an element specifies a special attribute, this
    handler function is invoked.  The handler function takes `(element, value,
    attrs, contents)`, where:

    - `element` is the element being operated on
    - `value` is the value of this special attribute for `element`
    - `attrs` is the full map of attributes for `element`
    - `contents` is the content/children for `element` (which can be a
      string, `RawHtml`, array, `ObsCell`, or `ObsArray`)

    So for instance, we can create a special attribute `drag` that just
    forwards to the jQuery `[jdragdrop]` plug-in:

    ```coffeescript
    rxt.specialAttrs.drag = (elt, fn, attrs, contents) -> elt.drag(fn)
    ```

    and then use it like so in your templates:

    ```coffeescript
    div {class: 'block', drag: -> $(this).css('top', e.offsetY)}
    ```

    [jdragdrop]: https://github.com/haberman/jdragdrop
